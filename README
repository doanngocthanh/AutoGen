# 🚀 AutoGen - AI-Powered Project Generator

<div align="center">

![AutoGen Banner](./SnapShotsImage/version2.png)

**The Ultimate AI Assistant for Full-Stack Project Generation**

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![Gemini AI](https://img.shields.io/badge/AI-Google%20Gemini-red.svg)](https://ai.google.dev/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Stars](https://img.shields.io/github/stars/doanngocthanh/AutoGen?style=social)](https://github.com/doanngocthanh/AutoGen)

*From idea to production-ready code in minutes, not weeks* ⚡
<br>

[![Buy Me a Coffee](https://img.shields.io/badge/Buy%20me%20a%20coffee-%E2%98%95%EF%B8%8F-orange?logo=buy-me-a-coffee&logoColor=white)](https://buymeacoffee.com/ngocthanhdoan)
</div>

## 🌟 What Makes AutoGen Special?

Imagine having **5 senior developers** working together 24/7 to build your project:
- 🎯 **Business Analyst** - Analyzes requirements and creates user stories
- 🏗️ **System Architect** - Designs scalable architecture and databases  
- 💻 **Full-Stack Developer** - Generates production-ready code
- 🧪 **QA Engineer** - Creates comprehensive test suites
- 🚀 **DevOps Expert** - Sets up CI/CD and deployment configs

All powered by **Google Gemini AI** with advanced RAG (Retrieval-Augmented Generation) system!

## ✨ Features That Will Blow Your Mind

### 🤖 Multi-Agent AI System
- **5 Specialized Gemini APIs** working in perfect harmony
- Each agent has unique expertise and responsibilities
- Intelligent context sharing between agents
- Advanced error handling and retry mechanisms

### 🧠 Smart RAG System
- **Scans existing project files** to understand context
- **Continues from where you left off** - no starting over!
- Learns from your codebase patterns
- Provides intelligent suggestions based on existing code

### 🔄 Resume-Anywhere Workflow
```python
# Resume from any stage - your progress is never lost!
await workflow.resume_workflow(user_input)
```

### 📁 Complete Project Structure
```
projects/your_project/
├── 01_requirements/     # Business analysis & user stories
├── 02_architecture/     # System design & tech stack
├── 03_code/            # Production-ready source code
├── 04_tests/           # Comprehensive test suites
├── 05_deployment/      # Docker, K8s, CI/CD configs
└── logs/               # Detailed generation logs
```

## 🎬 See It In Action

<div align="center">

### From Idea to Production in 5 Steps

![Step 1](./SnapShotsImage/version1_1.png) | ![Step 2](./SnapShotsImage/version1_2.png) | ![Step 3](./SnapShotsImage/version1_3.png)
:---:|:---:|:---:
**Requirements Analysis** | **Architecture Design** | **Code Generation**

![Step 4](./SnapShotsImage/version1_4.png) | ![Step 5](./SnapShotsImage/version1_5.png)
:---:|:---:
**Testing & Review** | **Deployment Setup**

</div>

## 🚀 Quick Start

### 1. Clone & Setup
```bash
git clone https://github.com/doanngocthanh/AutoGen.git
cd AutoGen
pip install -r requirements.txt
```

### 2. Configure API Keys
```bash
# Create .env file
echo "GEMINI_API_KEYS=your_key1,your_key2,your_key3,your_key4,your_key5" > .env
```

### 3. Generate Your First Project
```python
python version2.py
```

### 4. Describe Your Dream Project
```
I want to build an e-commerce platform with:
- Product & category management
- Shopping cart & checkout
- Order management system
- User authentication
- Admin dashboard
- Mobile API
- Payment integration (VNPay, Momo)
- Multi-language support
```

### 5. Watch the Magic Happen! ✨

## 💡 Real-World Example

Here's what AutoGen generated for an **E-commerce Platform**:

```typescript
// Generated backend API (FastAPI)
@app.post("/api/products")
async def create_product(product: ProductCreate, db: Session = Depends(get_db)):
    return crud.create_product(db=db, product=product)

// Generated frontend component (React)
const ProductList: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    // Complete component implementation...
}

// Generated tests
def test_create_product():
    response = client.post("/api/products", json={...})
    assert response.status_code == 201
```

## 🛠️ Advanced Features

### Smart Context Management
The [`RAGManager`](version2.py) class scans your project and provides intelligent context:

```python
# Automatically understands your project structure
rag_context = self.rag_manager.get_context_for_stage("deployment")
```

### Error Recovery & Resilience
Advanced JSON parsing with multiple fallback strategies:

```python
def parse_partial_json(self, text: str) -> Dict:
    """Finds and parses the first JSON object with smart error recovery"""
```

### Parallel Code Generation
Generate multiple modules simultaneously for faster development:

```python
# Generate backend, frontend, and database modules in parallel
tasks = [self.generate_module_code(module, prompt, context) for module in modules]
results = await asyncio.gather(*tasks)
```

## 📊 What You Get

### 📋 Requirements Analysis
- Detailed user stories
- Acceptance criteria
- Timeline estimates
- Priority rankings

### 🏗️ System Architecture
- Technology stack recommendations
- Database schema design
- API structure planning
- Scalability considerations

### 💻 Production Code
- **Complete, runnable source code**
- Best practices implementation
- Proper error handling
- Security considerations

### 🧪 Comprehensive Testing
- Unit tests with full coverage
- Integration tests
- End-to-end scenarios
- Performance benchmarks

### 🚀 Deployment Ready
- Dockerfiles for all services
- Kubernetes manifests
- CI/CD pipelines (GitHub Actions)
- Monitoring & logging setup

## 🎯 Perfect For

- 🚀 **Startup MVPs** - From idea to prototype in hours
- 🏢 **Enterprise Projects** - Scalable architecture & best practices
- 📚 **Learning & Education** - See how experts structure projects
- 🔬 **Prototyping** - Rapid proof-of-concept development
- 🛠️ **Boilerplate Generation** - Skip the repetitive setup

## 🤝 Contributing

We love contributions! Here's how you can help:

1. 🍴 Fork the repository
2. 🌿 Create a feature branch (`git checkout -b amazing-feature`)
3. 💍 Commit your changes (`git commit -m 'Add amazing feature'`)
4. 🚀 Push to the branch (`git push origin amazing-feature`)
5. 🎉 Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- **Google Gemini AI** for the powerful language models
- **FastAPI** for the awesome Python web framework
- **React** for the incredible frontend library
- **Docker** for containerization made simple

## 🌟 Star History

[![Star History Chart](https://api.star-history.com/svg?repos=doanngocthanh/AutoGen&type=Date)](https://star-history.com/#doanngocthanh/AutoGen&Date)

---

<div align="center">

**Ready to revolutionize your development workflow?**

⭐ **Star this repo** | 🍴 **Fork it** | 📢 **Share with friends**

*Built with ❤️ by developers, for developers*
<br>
[![Buy Me a Coffee](https://img.shields.io/badge/Buy%20me%20a%20coffee-%E2%98%95%EF%B8%8F-orange?logo=buy-me-a-coffee&logoColor=white)](https://buymeacoffee.com/ngocthanhdoan)
</div>