{
  "docker_files": {
    "Dockerfile_backend": "FROM node:18-alpine AS builder\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm install\nCOPY . ./\n\nRUN npm run build\n\nFROM node:18-alpine\n\nWORKDIR /app\n\nCOPY --from=builder /app ./\n\nEXPOSE 5000\n\nCMD [\"npm\", \"start\"]",
    "Dockerfile_frontend": "FROM node:18-alpine AS builder\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm install\nCOPY . ./\n\nRUN npm run build\n\nFROM nginx:alpine\n\nCOPY --from=builder /app/build /usr/share/nginx/html\n\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]",
    "docker-compose.yml": "version: \"3.8\"\nservices:\n  backend:\n    build:\n      context: .\n      dockerfile: Dockerfile_backend\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DB_HOST=db\n      - DB_NAME=ecommerce\n      - DB_USER=postgres\n      - DB_PASS=password\n      - DB_PORT=5432\n    depends_on:\n      - db\n    networks:\n      - app-network\n\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile_frontend\n    ports:\n      - \"3000:80\"\n    depends_on:\n      - backend\n    networks:\n      - app-network\n\n  db:\n    image: postgres:13-alpine\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=ecommerce\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\n\nvolumes:\n  db_data:"
  },
  "ci_cd_config": {
    ".github/workflows/deploy.yml": "name: Deploy to Kubernetes\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Build and push Docker images\n        id: build-and-push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: Dockerfile_backend\n          push: true\n          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:latest\n\n      - name: Build and push Docker images frontend\n        id: build-and-push-frontend\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: Dockerfile_frontend\n          push: true\n          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:latest\n\n      - name: Set up kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: 'v1.26.0'\n\n      - name: Configure Kubernetes cluster\n        uses: azure/k8s-set-context@v3\n        with:\n          method: kubeconfig\n          kubeconfig: ${{ secrets.K8S_CONFIG }}\n\n      - name: Deploy to Kubernetes\n        run: |\n          kubectl apply -f k8s_manifests/deployment.yaml\n          kubectl apply -f k8s_manifests/service.yaml\n          kubectl apply -f k8s_manifests/ingress.yaml"
  },
  "k8s_manifests": {
    "deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ecommerce-backend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: ecommerce-backend\n  template:\n    metadata:\n      labels:\n        app: ecommerce-backend\n    spec:\n      containers:\n        - name: ecommerce-backend\n          image: <DOCKERHUB_USERNAME>/ecommerce-backend:latest\n          ports:\n            - containerPort: 5000\n          env:\n            - name: DB_HOST\n              value: ecommerce-db-service\n            - name: DB_NAME\n              value: ecommerce\n            - name: DB_USER\n              value: postgres\n            - name: DB_PASS\n              value: password\n            - name: DB_PORT\n              value: \"5432\"\n--- \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ecommerce-frontend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: ecommerce-frontend\n  template:\n    metadata:\n      labels:\n        app: ecommerce-frontend\n    spec:\n      containers:\n        - name: ecommerce-frontend\n          image: <DOCKERHUB_USERNAME>/ecommerce-frontend:latest\n          ports:\n            - containerPort: 80",
    "service.yaml": "apiVersion: v1\nkind: Service\nmetadata:\n  name: ecommerce-backend-service\nspec:\n  selector:\n    app: ecommerce-backend\n  ports:\n    - protocol: TCP\n      port: 5000\n      targetPort: 5000\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ecommerce-frontend-service\nspec:\n  selector:\n    app: ecommerce-frontend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  type: LoadBalancer",
    "ingress.yaml": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ecommerce-ingress\n  annotations:\n    kubernetes.io/ingress.class: nginx\nspec:\n  rules:\n    - host: ecommerce.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: ecommerce-frontend-service\n                port:\n                  number: 80\n"
  },
  "deployment_guide": "1.  **Set up Docker Hub:** Create a Docker Hub account and store your username and token as GitHub secrets (`DOCKERHUB_USERNAME`, `DOCKERHUB_TOKEN`).\n2.  **Set up Kubernetes:** Configure access to your Kubernetes cluster and store the kubeconfig as a GitHub secret (`K8S_CONFIG`).\n3.  **Configure DNS:** Set up a DNS record for `ecommerce.example.com` pointing to the external IP address of your Kubernetes ingress controller.\n4.  **Apply Kubernetes manifests:** Run `kubectl apply -f k8s_manifests/` to deploy the application to Kubernetes.\n5.  **Monitor the deployment:** Use `kubectl get deployments`, `kubectl get services`, and `kubectl get ingress` to monitor the deployment status.\n6.  **Access the application:** Access the application at `ecommerce.example.com`."
}